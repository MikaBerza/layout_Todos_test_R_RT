import React from 'react';

import { useSelector, useDispatch } from 'react-redux';
import {
  setTaskListData,
  setShowTasks,
} from '../../../redux/slices/taskListDataSlice.js';
import { setTextareaMessage } from '../../../redux/slices/textareaMessageSlice.js';
import { setEditButton } from '../../../redux/slices/buttonGroupSlice.js';

import Search from '../../commons/searches/Search';
import Indicator from '../../commons/indicators/Indicator';
import Filtering from '../../commons/filtering/Filtering';
import Textarea from '../../commons/textareas/Textarea';
import ButtonGroup from '../../group/buttonGroup/ButtonGroup.jsx';
import Task from '../../commons/task/Task';

import {
  writeToLocalStorage,
  addTaskToTheList,
  replaceTaskToTheListWhenEditing,
} from '../../../utils/modules.js';

import style from './homePage.module.css';

const HomePage = () => {
  /* 
     –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ö—É–∫ useSelector –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Redux 
     –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π (taskListData) –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è,
     —Å –ø–æ–º–æ—â—å—é —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ taskListDataSlice 
  */
  const { taskListData } = useSelector((state) => state.taskListDataSlice);
  const { textareaMessage } = useSelector(
    (state) => state.textareaMessageSlice
  );
  const { editButton } = useSelector((state) => state.buttonGroupSlice);
  const dispatch = useDispatch();

  React.useEffect(() => {
    // –µ—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è,
    // –¥–∞–Ω–Ω—ã–µ —Å –∫–ª—é—á–æ–º editing(—Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è) –ø–µ—Ä–µ–∑–∞–ø–∏—à—É—Ç—Å—è
    return () => {
      if (taskListData !== null) {
        const newTaskListData = taskListData.map((item) => {
          if (item.editing === true) {
            // –∏–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—è —Å –∫–ª—é—á–æ–º (editing), —Å (true) –Ω–∞ (false)
            const newItem = { ...item, editing: false };
            return newItem;
          }
          // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —É—Å–ª–æ–≤–∏—é
          return item;
        });
        // –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
        dispatch(setTaskListData(newTaskListData));
        // –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ localStorage
        writeToLocalStorage(newTaskListData);
      }
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  // —Ñ—É–Ω–∫—Ü–∏—è, –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞–∂–∞—Ç–∏–µ–º –∫–ª–∞–≤–∏—à–∏ 'Enter'
  // —Å –ø–æ–º–æ—â—å—é –∫–ª–∞–≤–∏—à–∏ 'Enter' (–∏–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–î–û–ë–ê–í–ò–¢–¨")
  const handleAddTaskByEnterKeystroke = (event) => {
    // –∑–∞–ø–∏—à–µ–º –≤ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
    const executionResults = addTaskToTheList(taskListData, textareaMessage);

    if (executionResults !== null && event.key === 'Enter') {
      // –∑–∞–ø–∏—à–µ–º –≤ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
      const executionStatus = executionResults[0];

      // –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è _–ü–ï–†–í–´–ô_ —Ä–∞–∑
      if (executionStatus === 'first task') {
        // –∑–∞–ø–∏—à–µ–º –≤ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É –≤–æ–∑–≤—Ä–∞—â–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∏
        const objectWithTaskData = executionResults[1];
        // –∑–∞–ø–∏—à–µ–º –≤ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É –≤–æ–∑–≤—Ä–∞—â–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
        const arrayOfTaskListData = executionResults[2];

        // –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
        dispatch(setTaskListData([objectWithTaskData]));
        // –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ localStorage
        writeToLocalStorage(arrayOfTaskListData, objectWithTaskData);
        // –æ–±–Ω–æ–≤–ª—è–µ–º(–æ—á–∏—â–∞–µ–º) –ø–æ–ª–µ textarea
        dispatch(setTextareaMessage(''));
      }

      // –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è _–û–ß–ï–†–ï–î–ù–û–ô_ —Ä–∞–∑
      if (executionStatus === 'next task') {
        // –∑–∞–ø–∏—à–µ–º –≤ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É –≤–æ–∑–≤—Ä–∞—â–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∏
        const objectWithTaskData = executionResults[1];
        // –∑–∞–ø–∏—à–µ–º –≤ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É –≤–æ–∑–≤—Ä–∞—â–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
        const arrayOfTaskListData = executionResults[2];

        // –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á (—á—Ç–æ–±—ã –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –±—ã–ª –≤–Ω–∞—á–∞–ª–µ)
        dispatch(setTaskListData([objectWithTaskData, ...arrayOfTaskListData]));
        // –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ localStorage
        writeToLocalStorage(arrayOfTaskListData, objectWithTaskData);
        // –æ–±–Ω–æ–≤–ª—è–µ–º(–æ—á–∏—â–∞–µ–º) –ø–æ–ª–µ textarea
        dispatch(setTextareaMessage(''));
      }
    }
  };

  // —Ñ—É–Ω–∫—Ü–∏—è, –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–º–µ–Ω—É –∑–∞–¥–∞—á–∏ –Ω–∞–∂–∞—Ç–∏–µ–º –∫–ª–∞–≤–∏—à–∏ 'Enter'
  // —Å –ø–æ–º–æ—â—å—é –∫–ª–∞–≤–∏—à–∏ 'Enter' (–∏–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–†–ï–î–ê–ö–¢–ò–†–û–í–ê–¢–¨")
  const handleReplaceTaskByEnterKeystroke = (event) => {
    if (event.key === 'Enter') {
      // –∑–∞–ø–∏—à–µ–º –≤ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É –≤–æ–∑–≤—Ä–∞—â–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
      const arrayOfTaskListData = replaceTaskToTheListWhenEditing(
        taskListData,
        textareaMessage
      );

      // –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
      dispatch(setTaskListData(arrayOfTaskListData));
      // –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ localStorage
      writeToLocalStorage(arrayOfTaskListData);
      // –æ–±–Ω–æ–≤–ª—è–µ–º(–æ—á–∏—â–∞–µ–º) –ø–æ–ª–µ textarea
      dispatch(setTextareaMessage(''));
      // —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å)
      dispatch(setEditButton(false));
      // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
      dispatch(setShowTasks(true));
    }
  };

  return (
    <>
      <main
        className={style.content}
        onKeyDown={
          editButton === false
            ? handleAddTaskByEnterKeystroke
            : handleReplaceTaskByEnterKeystroke
        }
        tabIndex={0}
      >
        <section className={style.control}>
          <Search placeholders={'üîç –ø–æ–∏—Å–∫ –∑–∞–¥–∞—á'} />
          <Indicator nameOfStatuses={['–≤—Å–µ–≥–æ', '–∞–∫—Ç–∏–≤–Ω–æ', '–∑–∞–≤–µ—Ä—à–µ–Ω–æ']} />
          <Filtering
            title={'—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è'}
            nameOfFilters={['–≤—Å–µ', '–∞–∫—Ç–∏–≤–Ω—ã–µ', '–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ']}
          />
        </section>

        <section className={style.enteringTask}>
          <Textarea placeholders={'–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å?'} />
          <ButtonGroup />
        </section>

        <section className={style.outputTask}>
          <ul className={style.listTask}>
            {taskListData === null
              ? ''
              : taskListData.map((item) => {
                  return (
                    <Task
                      key={item.id}
                      id={item.id}
                      note={item.note}
                      calendarDate={item.date}
                      sign={item.sign}
                      checking={item.tick}
                      editing={item.editing}
                    />
                  );
                })}
          </ul>
        </section>
      </main>
    </>
  );
};

export default HomePage;
