import React from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { setTextareaMessage } from '../../../redux/slices/textareaMessageSlice.js';

import {
  generateId,
  checkLengthOfTheString,
  checkLocalStorageForNull,
  writeToLocalStorage,
  returnAnObjectWithDataFromLocalStorage,
} from '../../../utils/modules.js';

import Search from '../../commons/searches/Search';
import Indicator from '../../commons/indicators/Indicator';
import Filtering from '../../commons/filtering/Filtering';
import Textarea from '../../commons/textareas/Textarea';
import Button from '../../commons/buttons/Button';
import Task from '../../commons/task/Task';

import style from './homePage.module.css';

function HomePage() {
  const [taskListData, setTaskListData] = React.useState(null);
  const dispatch = useDispatch();
  /* –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ö—É–∫ useSelector –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Redux 
     –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π (textareaMessage) –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è,
     —Å –ø–æ–º–æ—â—å—é —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ textareaMessageSlice */
  const { textareaMessage } = useSelector(
    (state) => state.textareaMessageSlice
  );
  // const { id, note, date, tick, editing, sign } = useSelector(
  //   (state) => state.taskListDataSlice
  // );

  React.useEffect(() => {
    if (checkLocalStorageForNull() === true) {
      // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ localStorage
      const returnRaskListData = returnAnObjectWithDataFromLocalStorage();
      setTaskListData(returnRaskListData);
      console.log(returnRaskListData, 'sasas');
    } else if (checkLocalStorageForNull() === null) {
      console.log('777');
    }
  }, []);

  // //—Ñ—É–Ω–∫—Ü–∏—è, –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –æ–±–ª–∞—Å—Ç–∏
  // const handleTextareaMessageChange = (event) => {
  //   // setTextareaMessage(event.target.value);
  //   dispatch(setTextareaMessage(event.target.value));
  // };

  // —Ñ—É–Ω–∫—Ü–∏—è, –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–ª–∞–∂–∫–∞
  const handleCheckboxChange = (id) => {
    const newTaskListData = taskListData.map((item) => {
      if (item.id === id) {
        return {
          ...item,
          tick: !item.tick,
        };
      }
      return item;
    });
    setTaskListData(newTaskListData);
  };

  // —Ñ—É–Ω–∫—Ü–∏—è, —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É
  const removeTask = (id) => {
    // –∫–æ–ø–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å –ø–æ–º–æ—â—å—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ spread
    const copyTaskListData = [...taskListData];
    // —É–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Å–ø–∏—Å–∫–∞
    const newTaskListData = copyTaskListData.filter((item) => item.id !== id);
    // –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
    setTaskListData(newTaskListData);
  };

  // —Ñ—É–Ω–∫—Ü–∏—è, –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
  const addTaskToTheList = () => {
    // —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç —Å –¥–∞—Ç–æ–π
    const recordingDate = new Date(Date.now()).toLocaleDateString('en-GB', {
      hour: '2-digit',
      minute: '2-digit',
      day: '2-digit',
      month: '2-digit',
      year: '2-digit',
    });

    if (
      checkLocalStorageForNull() === null &&
      checkLengthOfTheString(textareaMessage) === true
    ) {
      // —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
      const taskListData = [];
      // —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏
      const objTaskData = {
        id: generateId(),
        note: textareaMessage,
        date: recordingDate,
        tick: false,
        editing: false,
        sign: 'x',
      };
      // –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setTaskListData(taskListData);
      // –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ localStorage
      writeToLocalStorage(taskListData, objTaskData);
      // –æ—á–∏—â–∞–µ–º –ø–æ–ª–µ textarea
      dispatch(setTextareaMessage(''));
    } else if (
      checkLocalStorageForNull() !== null &&
      checkLengthOfTheString(textareaMessage) === true
    ) {
      // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ localStorage
      const taskListData = returnAnObjectWithDataFromLocalStorage();
      // –∫–æ–ø–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å –ø–æ–º–æ—â—å—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ spread
      const copyTaskListData = [...taskListData];
      // —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏
      const objTaskData = {
        id: generateId(),
        note: textareaMessage,
        date: recordingDate,
        tick: false,
        editing: false,
        sign: 'x',
      };
      // –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setTaskListData([...copyTaskListData, objTaskData]);
      // –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ localStorage
      writeToLocalStorage(copyTaskListData, objTaskData);
      // –æ—á–∏—â–∞–µ–º –ø–æ–ª–µ textarea
      dispatch(setTextareaMessage(''));
    }
  };

  return (
    <>
      <main className={style.content}>
        <section className={style.control}>
          <Search placeholders={'üîç –ø–æ–∏—Å–∫ –∑–∞–¥–∞—á'} />
          <Indicator nameOfStatuses={['–≤—Å–µ–≥–æ', '–∞–∫—Ç–∏–≤–Ω–æ', '–∑–∞–≤–µ—Ä—à–µ–Ω–æ']} />
          <Filtering
            title={'—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è'}
            nameOfFilters={['–≤—Å–µ', '–∞–∫—Ç–∏–≤–Ω—ã–µ', '–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ']}
          />
        </section>

        <section className={style.enteringTask}>
          <Textarea placeholders={'–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å?'} />
          <div className={style.buttons}>
            <Button name={'–í—ã–±—Ä–∞—Ç—å –≤—Å—ë'} />
            <Button name={'–£–¥–∞–ª–∏—Ç—å'} />
            <Button name={'–î–æ–±–∞–≤–∏—Ç—å'} addTaskToTheList={addTaskToTheList} />
          </div>
        </section>

        <section className={style.outputTask}>
          <ul className={style.listTask}>
            {taskListData === null
              ? ''
              : taskListData.map((item) => {
                  return (
                    <Task
                      key={item.id}
                      id={item.id}
                      note={item.note}
                      calendarDate={item.date}
                      sign={item.sign}
                      checking={item.tick}
                      handleCheckboxChange={handleCheckboxChange}
                      removeTask={removeTask}
                    />
                  );
                })}
          </ul>
        </section>
      </main>
    </>
  );
}

export default HomePage;
