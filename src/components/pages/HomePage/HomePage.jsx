import React from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { setTaskListData } from '../../../redux/slices/taskListDataSlice.js';
import { setTextareaMessage } from '../../../redux/slices/textareaMessageSlice.js';

import {
  generateId,
  checkLengthOfTheString,
  writeToLocalStorage,
} from '../../../utils/modules.js';

import Search from '../../commons/searches/Search';
import Indicator from '../../commons/indicators/Indicator';
import Filtering from '../../commons/filtering/Filtering';
import Textarea from '../../commons/textareas/Textarea';
import Button from '../../commons/buttons/Button';
import Task from '../../commons/task/Task';

import style from './homePage.module.css';

const HomePage = () => {
  /* 
     –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ö—É–∫ useSelector –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Redux 
     –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π (taskListData) –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è,
     —Å –ø–æ–º–æ—â—å—é —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ taskListDataSlice 
  */
  const { taskListData } = useSelector((state) => state.taskListDataSlice);
  const { textareaMessage } = useSelector(
    (state) => state.textareaMessageSlice
  );
  /*
  useDispatch - —ç—Ç–æ —Ö—É–∫ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Redux, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
  –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ dispatch –∏–∑ Redux store. 
  –§—É–Ω–∫—Ü–∏—è dispatch –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ(action) –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
  –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –µ–≥–æ –≤ —Ä–µ–¥—é—Å–µ—Ä—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
  –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ dispatch –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è Redux.
  */
  const dispatch = useDispatch();

  React.useEffect(() => {
    if (taskListData === null) {
      console.log('localStorage-–ü–£–°–¢!!!', taskListData);
    } else if (taskListData !== null) {
      console.log('localStorage-–ù–ï –ü–£–°–¢!!!', taskListData);
    }
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  // —Ñ—É–Ω–∫—Ü–∏—è, –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
  const addTaskToTheList = () => {
    // —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç —Å –¥–∞—Ç–æ–π
    const recordingDate = new Date(Date.now()).toLocaleDateString('en-GB', {
      hour: '2-digit',
      minute: '2-digit',
      day: '2-digit',
      month: '2-digit',
      year: '2-digit',
    });

    if (
      taskListData === null &&
      checkLengthOfTheString(textareaMessage) === true
    ) {
      // —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
      const newTaskListData = [];
      // —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏
      const objTaskData = {
        id: generateId(),
        note: textareaMessage,
        date: recordingDate,
        tick: false,
        editing: false,
        sign: 'x',
      };
      // –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
      dispatch(setTaskListData([objTaskData]));
      // –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ localStorage
      writeToLocalStorage(newTaskListData, objTaskData);
      // –æ–±–Ω–æ–≤–ª—è–µ–º(–æ—á–∏—â–∞–µ–º) –ø–æ–ª–µ textarea
      dispatch(setTextareaMessage(''));
    }

    if (
      taskListData !== null &&
      checkLengthOfTheString(textareaMessage) === true
    ) {
      // –∫–æ–ø–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å –ø–æ–º–æ—â—å—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ spread
      const copyTaskListData = [...taskListData];
      // —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏
      const objTaskData = {
        id: generateId(),
        note: textareaMessage,
        date: recordingDate,
        tick: false,
        editing: false,
        sign: 'x',
      };
      // –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á (—á—Ç–æ–±—ã –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –±—ã–ª –≤–Ω–∞—á–∞–ª–µ)
      dispatch(setTaskListData([objTaskData, ...copyTaskListData]));
      // –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ localStorage
      writeToLocalStorage(copyTaskListData, objTaskData);
      // –æ–±–Ω–æ–≤–ª—è–µ–º(–æ—á–∏—â–∞–µ–º) –ø–æ–ª–µ textarea
      dispatch(setTextareaMessage(''));
    }
  };

  return (
    <>
      <main className={style.content}>
        <section className={style.control}>
          <Search placeholders={'üîç –ø–æ–∏—Å–∫ –∑–∞–¥–∞—á'} />
          <Indicator nameOfStatuses={['–≤—Å–µ–≥–æ', '–∞–∫—Ç–∏–≤–Ω–æ', '–∑–∞–≤–µ—Ä—à–µ–Ω–æ']} />
          <Filtering
            title={'—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è'}
            nameOfFilters={['–≤—Å–µ', '–∞–∫—Ç–∏–≤–Ω—ã–µ', '–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ']}
          />
        </section>

        <section className={style.enteringTask}>
          <Textarea placeholders={'–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å?'} />
          <div className={style.buttons}>
            <Button name={'–í—ã–±—Ä–∞—Ç—å –≤—Å—ë'} />
            <Button name={'–£–¥–∞–ª–∏—Ç—å'} />
            <Button name={'–î–æ–±–∞–≤–∏—Ç—å'} addTaskToTheList={addTaskToTheList} />
          </div>
        </section>

        <section className={style.outputTask}>
          <ul className={style.listTask}>
            {taskListData === null
              ? ''
              : taskListData.map((item) => {
                  return (
                    <Task
                      key={item.id}
                      id={item.id}
                      note={item.note}
                      calendarDate={item.date}
                      sign={item.sign}
                      checking={item.tick}
                    />
                  );
                })}
          </ul>
        </section>
      </main>
    </>
  );
};

export default HomePage;
